# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17XqsVo_w2twOXpCvlcQuJ95uymRKXobu
"""



##!ls /content/drive/MyDrive/DCGAN-pytorch/*.py 
#!cat '/content/drive/MyDrive/DCGAN-pytorch/dcgan.py'
#!cat '/content/drive/MyDrive/DCGAN-pytorch/utils.py'

#import sys
#sys.path.append('/content/drive/MyDrive/DCGAN-pytorch')

#%matplotlib inline
import argparse
import os
import random
import torch
import torch.nn as nn
import torch.nn.parallel
import torch.backends.cudnn as cudnn
import torch.optim as optim
import torch.utils.data
import torchvision.datasets as dset
import torchvision.transforms as transforms
import torchvision.utils as vutils
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

from numpy import cov
from numpy import trace
from numpy import iscomplexobj
from scipy.linalg import sqrtm

if __name__ == '__main__':

    # Set random seed for reproducibility
    manualSeed = 999
    #manualSeed = random.randint(1, 10000) # use if you want new results
    print("Random Seed: ", manualSeed)
    random.seed(manualSeed)
    torch.manual_seed(manualSeed)

    torch.cuda.is_available()

    # Number of workers for dataloader
    workers = 2

    # Batch size during training
    batch_size = 128

    # Spatial size of training images. All images will be resized to this
    #   size using a transformer.
    image_size = 64

    # Number of channels in the training images. For color images this is 3
    nc = 3

    # Size of z latent vector (i.e. size of generator input)
    nz = 100

    # Size of feature maps in generator
    ngf = 64

    # Size of feature maps in discriminator
    ndf = 64

    # Number of training epochs
    num_epochs = 100

    # Learning rate for optimizers
    lr = 0.0002

    # Beta1 hyperparam for Adam optimizers
    beta1 = 0.5

    # Number of GPUs available. Use 0 for CPU mode.
    ngpu = 1

    # Step of saving epoch
    save_epoch = 2

    # We can use an image folder dataset the way we have it setup.
    # Create the dataset

    # Decide which device we want to run on
    device = torch.device("cuda:0" if (torch.cuda.is_available() and ngpu > 0) else "cpu")

    # Plot some training images
    

    print(device, " will be used.\n")

    # custom weights initialization called on netG and netD
    def weights_init(m):
        classname = m.__class__.__name__
        if classname.find('Conv') != -1:
            nn.init.normal_(m.weight.data, 0.0, 0.02)
        elif classname.find('BatchNorm') != -1:
            nn.init.normal_(m.weight.data, 1.0, 0.02)
            nn.init.constant_(m.bias.data, 0)

    # Generator Code
    class Generator(nn.Module):
        def __init__(self, ngpu):
            super(Generator, self).__init__()
            self.ngpu = ngpu
            self.main = nn.Sequential(
                # input is Z, going into a convolution
                nn.ConvTranspose2d( nz, ngf * 8, 4, 1, 0, bias=False),
                nn.BatchNorm2d(ngf * 8),
                nn.ReLU(True),
                # state size. (ngf*8) x 4 x 4
                nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ngf * 4),
                nn.ReLU(True),
                # state size. (ngf*4) x 8 x 8
                nn.ConvTranspose2d( ngf * 4, ngf * 2, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ngf * 2),
                nn.ReLU(True),
                # state size. (ngf*2) x 16 x 16
                nn.ConvTranspose2d( ngf * 2, ngf, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ngf),
                nn.ReLU(True),
                # state size. (ngf) x 32 x 32
                nn.ConvTranspose2d( ngf, nc, 4, 2, 1, bias=False),
                nn.Tanh()
                # state size. (nc) x 64 x 64
            )

        def forward(self, input):
            return self.main(input)

    # Create the generator
    netG = Generator(ngpu).to(device)

    # Handle multi-gpu if desired
    if (device.type == 'cuda') and (ngpu > 1):
        netG = nn.DataParallel(netG, list(range(ngpu)))

    # Apply the weights_init function to randomly initialize all weights
    #  to mean=0, stdev=0.2.
    netG.apply(weights_init)

    # Print the model
    print(netG)


    class Discriminator(nn.Module):
        def __init__(self, ngpu):
            super(Discriminator, self).__init__()
            self.ngpu = ngpu
            self.main = nn.Sequential(
                # input is (nc) x 64 x 64
                nn.Conv2d(nc, ndf, 4, 2, 1, bias=False),
                nn.LeakyReLU(0.2, inplace=True),
                # state size. (ndf) x 32 x 32
                nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ndf * 2),
                nn.LeakyReLU(0.2, inplace=True),
                # state size. (ndf*2) x 16 x 16
                nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ndf * 4),
                nn.LeakyReLU(0.2, inplace=True),
                # state size. (ndf*4) x 8 x 8
                nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ndf * 8),
                nn.LeakyReLU(0.2, inplace=True),
                # state size. (ndf*8) x 4 x 4
                nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),
                nn.Sigmoid()
            )

        def forward(self, input):
            return self.main(input)

    # Create the Discriminator
    netD = Discriminator(ngpu).to(device)

    # Handle multi-gpu if desired
    if (device.type == 'cuda') and (ngpu > 1):
        netD = nn.DataParallel(netD, list(range(ngpu)))
        


    # Load the checkpoint file.
    load_path = r'-- dir of your model, should be (.pth) file'

    state_dict = torch.load(load_path)

    # Set the device to run on: GPU or CPU.
    device = torch.device("cuda:0" if(torch.cuda.is_available()) else "cpu")
    print(device)
    # Get the 'params' dictionary from the loaded state_dict.
    num_output = 64
    Z_dimension = 100

    # Create the generator network.
    netG = Generator(1).to(device)
    # Load the trained generator weights.
    netG.load_state_dict(state_dict['generator'])
    print(netG)

    # torch.manual_seed(110)#

    img_l=[]

    input_noise = torch.randn(int(num_output),Z_dimension, 1, 1, device=device)

        # Turn off gradient calculation to speed up the process.
    with torch.no_grad():
            # Get generated image from the noise vector using
            # the trained generator.
        generated_img = netG(input_noise).detach().cpu()
        print(generated_img.shape)

    # Display the generated image.
    fig = plt.figure(figsize=(15,15))
    plt.axis("off")
    plt.title("Generated Images")
    plt.imshow(np.transpose(vutils.make_grid(generated_img, padding=2, normalize=True), (1,2,0)))
    plt.show()
    # Create image matrix
    # fig = plt.figure(figsize=(8, 8))
    # plt.axis("off")

    #######################################################################
    # # Generate figure with different z latent value
    # manipulation_factor = torch.ones(1, 100, 1, 1, device=device)
    #
    # for n in range(1,100,20):
    #   for k in np.linspace(-3.0, 3.0, num=10):
    #     manipulation_factor[0][n] = k
    #     new_input = torch.mul(manipulation_factor, input_noise)
    #     with torch.no_grad():
    #       # Get generated image from the noise vector using
    #       # the trained generator.
    #         img = netG(new_input).detach().cpu()
    #
    #     # Display the generated image.
    #    # plt.axis("off")
    #     #plt.title("Generated Images: feature: " + str(n) + "/ condition: " + str(k))
    #     #plt.imshow(np.transpose(vutils.make_grid(img, padding=2, normalize=True), (1,2,0)))
    #
    #     #plt.show()
    # #
    # # """**Generate a list of image with smoothly transitting Z features**"""
    # #
    # manipulation_factor = torch.ones(1, 100, 1, 1, device=device)
    #
    # img_list = []
    # num_of_sample = 10
    # for n in range(1,100,num_of_sample):
    #   for k in np.linspace(-3.0, 3.0, num=10):
    #       manipulation_factor[0][n] = k
    #       new_input = torch.mul(manipulation_factor, input_noise)
    #       with torch.no_grad():
    #         # Get generated image from the noise vector using
    #         # the trained generator.
    #         img = netG(new_input).detach().cpu()
    #         img_list.append(img)
    # len(img_list)
    # # plt.show()
    # # """**Examine the role of selected Z latent attribute**"""
    # #
    # fig=plt.figure()
    # axes=[]
    # fig=plt.figure(figsize=(30, 30))
    # rows = 100//num_of_sample
    # cols = 10
    #
    # img1=img_list[0]
    #
    # for a in range(rows*cols):
    #     img = img_list[a]
    #     axes.append( fig.add_subplot(rows, cols, a+1) )
    #     #subplot_title=("Feature"+str(a//rows))
    #     #axes[-1].set_title(subplot_title)
    #     plt.axis("off")
    #     plt.imshow(np.transpose(vutils.make_grid(img, padding=2, normalize=True), (1,2,0)))
    # fig.tight_layout()
    # plt.show()